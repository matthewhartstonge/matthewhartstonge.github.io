<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SoftwareDevelopment on Matt Writes Things Sometimes</title><link>https://blog.mykro.co.nz/tags/softwaredevelopment/</link><description>Recent content in SoftwareDevelopment on Matt Writes Things Sometimes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; Copyright 2023 Matthew Hartstonge</copyright><lastBuildDate>Sat, 22 Jul 2023 17:45:00 +1200</lastBuildDate><atom:link href="https://blog.mykro.co.nz/tags/softwaredevelopment/index.xml" rel="self" type="application/rss+xml"/><item><title>Devlog: 002 - Building Terraform Custom Types</title><link>https://blog.mykro.co.nz/posts/2023-07-19-devlog-002/</link><pubDate>Sat, 22 Jul 2023 17:45:00 +1200</pubDate><guid>https://blog.mykro.co.nz/posts/2023-07-19-devlog-002/</guid><description>Terraform Plugin Framework Custom Types One of the great new things the Terraform Plugin Framework provides is a stronger focus on strict typing and with that, the ability to develop custom types.
One of the first issues I discovered straight out of the gate when attempting to build a new Terraform Provider with the Plugin Framework was that the data I was modelling for a resource used UUIDs for its record ids.</description></item><item><title>Devlog: 001 - Building Terraform Providers</title><link>https://blog.mykro.co.nz/posts/2023-07-12-devlog-001/</link><pubDate>Wed, 12 Jul 2023 21:59:45 +1200</pubDate><guid>https://blog.mykro.co.nz/posts/2023-07-12-devlog-001/</guid><description>Terraform If you&amp;rsquo;ve been living under a rock or happen to be a newcomer in the DevOps/Site Reliability Engineering space, Hashicorp&amp;rsquo;s Terraform enables provisioning and managing cloud infrastructure. It&amp;rsquo;s essentially a glorified diffing tool for any cloud resource that, as long as a Terraform Provider exists, can ensure the state of your infrastructure is as expected when written in Hashicorp Config Language (HCL).
As a forewarning before digging deeper, it has been common to hear some Linuxy sysadmin-looking neckbeards in-passing talking about infrastructure as code, better known as IaC, being the bee&amp;rsquo;s knees and how they keep managing to give Dave a good ribbing after causing the Great Network failure of &amp;lsquo;22 after performing a Git force push&amp;hellip;</description></item><item><title>Else Is Evil</title><link>https://blog.mykro.co.nz/posts/2023-05-30-else-is-evil/</link><pubDate>Tue, 30 May 2023 16:00:00 +1200</pubDate><guid>https://blog.mykro.co.nz/posts/2023-05-30-else-is-evil/</guid><description>Take the following Go code as an example:
package main type CodeType int const ( CodeA CodeType = iota + 10 CodeB ) func calculateCodes(codeType CodeType) int { var value int if codeType == CodeA { value = 10 } else { value = 20 } return value } func main() { fmt.Println(calculateCodes(CodeA)) } Why is else evil? There are a number of things that can cause an issue as code gets maintained over its lifecycle which can be dangerous:</description></item></channel></rss>